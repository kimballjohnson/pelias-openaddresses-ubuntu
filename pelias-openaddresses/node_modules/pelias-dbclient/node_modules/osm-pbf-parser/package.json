{
  "name": "osm-pbf-parser",
  "version": "2.3.0",
  "description": "streaming open street maps protocol buffer parser",
  "main": "index.js",
  "dependencies": {
    "brfs": "^1.4.1",
    "inherits": "^2.0.1",
    "protocol-buffers": "^3.1.3",
    "readable-stream": "^2.0.4",
    "stream-combiner2": "^1.1.1"
  },
  "devDependencies": {
    "tape": "^4.2.2",
    "through2": "^2.0.0"
  },
  "scripts": {
    "test": "tape test/*.js",
    "browser-test": "browserify test/browser/*.js | testling",
    "pretest": "test/extracts/fetch.sh"
  },
  "browserify": {
    "transform": [
      "brfs"
    ]
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/substack/osm-pbf-parser.git"
  },
  "homepage": "https://github.com/substack/osm-pbf-parser",
  "keywords": [
    "osm",
    "openstreetmaps",
    "protobuf",
    "streaming",
    "parser"
  ],
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "contributors": [
    {
      "name": "Astro"
    }
  ],
  "license": "MIT and LGPL",
  "readme": "# osm-pbf-parser\n\nstreaming [open street maps](https://wiki.openstreetmap.org) protocol buffer\nparser\n\n[![build status](https://secure.travis-ci.org/substack/osm-pbf-parser.png)](http://travis-ci.org/substack/osm-pbf-parser)\n\n# example\n\nFirst grab a pbf torrent from\nhttp://osm-torrent.torres.voyager.hr/files/rss.xml or from http://download.geofabrik.de/\n\n``` js\nvar fs = require('fs');\nvar through = require('through2');\nvar parseOSM = require('osm-pbf-parser');\n\nvar osm = parseOSM();\nfs.createReadStream(process.argv[2])\n    .pipe(osm)\n    .pipe(through.obj(function (items, enc, next) {\n        items.forEach(function (item) {\n            console.log('item=', item);\n        });\n        next();\n    }))\n;\n```\n\nThen you can parse the results:\n\n```\n$ node parser osm.pbf | head -n15\nitem= {\n  type: 'node',\n  id: 122321,\n  lat: 53.527972600000005,\n  lon: 10.0241143,\n  tags: {},\n  info: {\n     version: 9,\n     id: 122321,\n     timestamp: 1329691614000,\n     changeset: 10735897,\n     uid: 349191,\n     user: 'glühwürmchen'\n  }\n}\nitem= {\n  type: 'way',\n  id: 108,\n  tags: {\n     created_by: 'Potlatch 0.8',\n     highway: 'living_street',\n     name: 'Kitzbühler Straße',\n     postal_code: '01217' },\n  refs: [ 442752, 231712390, 442754 ],\n  info: {\n     version: 5,\n     timestamp: 1227877069000,\n     changeset: 805472,\n     uid: 42123,\n     user: 'Ropino'\n  }\n}\nitem= {\n  type: 'relation',\n  id: 3030,\n  tags: { layer: '1', type: 'bridge' },\n  members: [\n     { type: 'way', id: 12156789, role: 'across' },\n     { type: 'way', id: 12156793, role: 'under' },\n     { type: 'way', id: 34235338, role: '' }\n  ],\n  info: {\n     version: 3,\n     timestamp: 1323359077000,\n     changeset: 10066052,\n     uid: 75154,\n     user: 'RWR'\n  }\n}\n```\n\n# methods\n\n``` js\nvar parseOSM = require('osm-pbf-parser')\n```\n\n## var stream = parseOSM()\n\nReturn a transform parser `stream` that takes a binary OSM protocol buffer\nstream as input and produces parsed objectMode rows as output.\n\n# rows\n\nEach `row` from the output stream has a `row.type`.\n\n# parallel processing\n\nThe module exposes `BlobParser` and `BlobEncoder` so that you\ndistribute binary work units for parsing. See the `pstats` example.\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```\nnpm install osm-pbf-parser\n```\n\n# license\n\nMIT\n",
  "readmeFilename": "readme.markdown",
  "bugs": {
    "url": "https://github.com/substack/osm-pbf-parser/issues"
  },
  "_id": "osm-pbf-parser@2.3.0",
  "dist": {
    "shasum": "0bdf255fe13ca275578f55cde993ba07db05f4da"
  },
  "_from": "osm-pbf-parser@^2.1.2",
  "_resolved": "https://registry.npmjs.org/osm-pbf-parser/-/osm-pbf-parser-2.3.0.tgz"
}
