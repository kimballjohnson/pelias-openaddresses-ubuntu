{
  "name": "through2-sink",
  "version": "1.0.0",
  "description": "A through2 wrapper that just receives chunks and nothing else.",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:joepie91/through2-sink.git"
  },
  "keywords": [
    "streams",
    "through",
    "through2",
    "passthrough",
    "spy"
  ],
  "author": {
    "name": "Sven Slootweg"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/joepie91/through2-sink/issues"
  },
  "dependencies": {
    "through2": "~0.5.1",
    "xtend": "~3.0.0"
  },
  "readme": "through2-spy\n============\n\n[![NPM](https://nodei.co/npm/through2-sink.png)](https://nodei.co/npm/through2-sink/)\n\nThis is a super thin wrapper around [through2](http://npm.im/through2) for creating simple 'terminus' streams, that do nothing but look at the chunk received.\n\nThis module is heavily based on Bryce B. Baril's [through2-spy](https://www.npmjs.com/package/through2-spy), with the `.push` call removed. Why? So that you can have the same functionality at the *end* of a pipeline, without buffering everything up. It was originally written to help implement progress events in [bhttp](https://www.npmjs.com/package/bhttp). If you were to just use `through2-spy` for this, then [this](https://github.com/joyent/node/issues/14477) would happen.\n\nPass a function to run as each chunk goes through your stream pipeline. Return an Error to abort the pipeline.\n\n```js\n\nvar sink = require(\"through2-sink\")\n\nvar count = 0\nvar countChunks = sink(function (chunk) {\n  count++\n})\n\n// vs. with through2:\nvar countChunks = through2(function (chunk, encoding, callback) {\n  count++\n  return callback()\n})\n\n// Then use your sink:\nsource.pipe(countChunks)\n\n// Additionally accepts `wantStrings` argument to conver buffers into strings\nvar nsaregex = /(open source)|(foss)|(node\\.js)|(mods are asleep)|(post sinks)/i\nvar prizm = sink({wantStrings: true}, function (str) {\n  var buggyWiretap = str.match(nsaregex)\n  if (buggyWiretap) {\n    this.emit(\"OMGTERRIST\", buggyWiretap[0], str)\n  }\n})\n\nprizm.on(\"OMGTERRIST\", sendDrone(/* ... */))\n\ninternet.pipe(prizm) // can't have the terrists getting their packets!\n\n// Return an Error to abort the pipeline\nvar Meter = sink.ctor({maxBytes: 1024, bytes: 0}, function (chunk) {\n  this.options.bytes += chunk.length\n  if (this.options.bytes >= this.options.maxBytes) return new Error(\"Over 1024 byte limit!\")\n})\n\nvar meter = new Meter()\n\n```\n\nAPI\n---\n\n`require(\"through2-sink\")([options], fn)`\n---\n\nCreate a `through2-sink` instance that will call `fn(chunk)` and then silently pass through data downstream.\n\n`require(\"through2-sink\").ctor([options], fn)`\n---\n\nCreate a `through2-sink` Type that can be instantiated via `new Type()` or `Type()` to create reusable sinks.\n\n`require(\"through2-sink\").obj([options], fn)`\n---\n\nCreate a `through2-sink` that defaults to `objectMode = true`.\n\n`require(\"through2-sink\").objCtor([options], fn)`\n---\n\nCreate a `through2-sink` Type that defaults to `objectMode = true`.\n\nOptions\n-------\n\n  * wantStrings: Automatically call chunk.toString() for the super lazy.\n  * all other through2 options\n\nLICENSE\n=======\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "through2-sink@1.0.0",
  "dist": {
    "shasum": "fcdba311503acce5cb02508c36d473c9e189f425"
  },
  "_from": "through2-sink@^1.0.0",
  "_resolved": "https://registry.npmjs.org/through2-sink/-/through2-sink-1.0.0.tgz"
}
