{
  "name": "pelias-parallel-stream",
  "version": "0.0.2",
  "description": "Transform stream that allows async function to be called in parallel while still consuming results into a syncronous stream'",
  "main": "index.js",
  "scripts": {
    "test": "./node_modules/.bin/tape test/test.js | tap-dot",
    "example": "node example/simple.js"
  },
  "keywords": [
    "stream",
    "parallel",
    "async"
  ],
  "author": {
    "name": "Mapzen"
  },
  "license": "MIT",
  "devDependencies": {
    "event-stream": "^3.3.2",
    "stream-array": "^1.1.1",
    "stream-sink": "^1.2.0",
    "tap-dot": "^1.0.1",
    "tape": "^4.4.0",
    "through2-sink": "^1.0.0"
  },
  "dependencies": {
    "through2": "^2.0.0"
  },
  "readme": "# pelias-parallel-stream\n\nSometimes you want to call an async function inside a transform stream and be able to\ntake full advantage of the magical asynchronicity of node.js.\n \nIn order to do this, we must decouple the `this.push(data)` from the `next()`.\n \nThis module allows you to do that in a clean and simple way. See below.\n\n\n## usage\n\n```javascript\nvar parallelStream = require('pelias-parallel-stream');\n\nvar maxInFlight = 2;\n\nvar seeYouLaterStream = parallelStream(maxInFlight, \n  function (doc, enc, next) {\n    console.log('I see you, ' + doc.name);\n    \n    setTimeout(function () {\n      doc.msg = 'Oh hey there, ' + doc.name;\n      next(null, doc);\n    }, 1000);\n  },\n  function () {\n     console.log('Ooh, looks like the stream is finished');\n  });\n```\n\n> NOTE: the end function is optional\n\nOnce you've made your new parallel stream, you can use it just like you would any normal transform stream.\nJust throw it into a `.pipe()` call, like so.\n\n```javascript\nvar streamArray = require('stream-array');\nvar sink = require('through2-sink');\n\nstreamArray([{name:'Diana'}, {name:'Julian'}, {name:'Stephen'}, {name:'Peter'}])\n  .pipe(seeYouLaterStream)  // <--- there it is\n  .pipe(sink.obj(function (doc) {\n    console.log(doc.msg);\n  }));\n```\n\nYou can see the full example [here](example/simple.js)\n\nNow let's play around with this `maxInFlight` parameter.\nLet's first see how setting the `maxInFlight` to `1` results in a strandard ___serial___ transform stream.\nSo the output will look like this...\n\n```bash\n$ time npm run example -- 1\nI see you, Diana\nOh hey there again, Diana\nI see you, Julian\nOh hey there again, Julian\nI see you, Stephen\nOh hey there again, Stephen\nI see you, Peter\nOh hey there again, Peter\n\nreal\t0m4.256s\nuser\t0m0.114s\nsys\t    0m0.021s\n```\n\nNow let's set it to `2` and see how different the output looks, and if performance has improved.\n\n```bash\n$ time npm run example -- 2\nI see you, Diana\nI see you, Julian\nOh hey there again, Diana\nI see you, Stephen\nOh hey there again, Julian\nI see you, Peter\nOh hey there again, Stephen\nOh hey there again, Peter\n\nreal\t0m2.258s\nuser\t0m0.128s\nsys\t    0m0.025s\n```\n\nYou can see when we allow 2 requests in flight, we get the first 2 requests back-to-back, send then off for async\nhandling and then pause to wait for one of them to return and make room for the next incoming request.\nAs soon as we've seen one of the first 2 requests come back (`Oh hey there again, Diana`),\nanother incoming requests comes in (`I see you, Stephen`). And let's note that the amount of time it took to get through\nall the data has been cut in half, because... __asynchronous__!\n  \nFinally, let's run it with `maxInFlight` set to `200`, which is just a number larger than the length of the input data array.\n\n```bash\n$ time npm run example -- 200\nI see you, Diana\nI see you, Julian\nI see you, Stephen\nI see you, Peter\nOh hey there again, Diana\nOh hey there again, Julian\nOh hey there again, Stephen\nOh hey there again, Peter\n\nreal\t0m1.159s\nuser\t0m0.121s\nsys\t    0m0.022s\n```\n\nYou can see that all the requests were sent out at once, and all the responses came in shortly thereafter. \nNote how quickly it all happened, too. ",
  "readmeFilename": "README.md",
  "_id": "pelias-parallel-stream@0.0.2",
  "dist": {
    "shasum": "c11299bbad7cee3069268eee7962421aa00bf9c0"
  },
  "_from": "pelias-parallel-stream@0.0.2",
  "_resolved": "https://registry.npmjs.org/pelias-parallel-stream/-/pelias-parallel-stream-0.0.2.tgz"
}
